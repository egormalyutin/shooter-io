// Generated by CoffeeScript 1.12.5
var canvasHeight, canvasWidth, client, create, game, global, newPlayer, players, preload, server, ui, update;

client = new Eureca.Client;

players = {};

preload = function() {
  game.physics.startSystem(Phaser.Physics.P2JS);
  return game.load.image('player', 'images/star.png');
};

create = function() {};

update = function() {
  var _, cursors, m, player;
  cursors = game.input.keyboard.createCursorKeys();
  m = 0;
  for (_ in players) {
    player = players[_];
    player.body.setZeroRotation();
    player.body.setZeroVelocity();
  }
  if (global.controlling) {
    if (cursors.left.isDown) {
      server.input(global.name, global.token, "a");
      global.controlling.body.moveLeft(400);
    } else if (cursors.right.isDown) {
      server.input(global.name, global.token, "d");
      global.controlling.body.moveRight(400);
    }
    if (cursors.up.isDown) {
      server.input(global.name, global.token, "w");
      return global.controlling.body.moveUp(400);
    } else if (cursors.down.isDown) {
      server.input(global.name, global.token, "s");
      return global.controlling.body.moveDown(400);
    }
  }
};

canvasWidth = window.innerWidth * window.devicePixelRatio;

canvasHeight = window.innerHeight * window.devicePixelRatio;

game = new Phaser.Game(canvasWidth, canvasHeight, Phaser.AUTO, 'game', {
  preload: preload,
  create: create,
  update: update
}, true);

global = {};

server = {};

newPlayer = function(settings, token) {
  var name, pl, prop;
  pl = game.add.sprite(0, 0, 'player');
  for (name in settings) {
    prop = settings[name];
    pl[name] = prop;
  }
  game.physics.enable(pl, Phaser.Physics.P2JS);
  if (token) {
    global.controlling = pl;
  }
  return pl;
};

client.exports.playerUpdated = function(player) {
  if (!global.ready) {
    return;
  }
  if (!(players[player.name] && players.name !== global.name)) {
    return players[player.name] = newPlayer(player);
  } else {
    players[player.name].name = player.name;
    players[player.name].x = player.x;
    players[player.name].y = player.y;
    players[player.name].count = player.count;
    return players[player.name].connectionID = player.connectionID;
  }
};

client.exports.playerRemoved = function(name) {
  players[name].destroy();
  ui.preloader.css('opacity', '1');
  return delete players[name];
};

client.exports.serverClosed = function(message) {
  game.destroy();
  ui.connection.text(message);
  ui.connection.show();
  return ui.connection.css('opacity', '1');
};

client.exports.serverOpened = function() {
  return location.reload();
};

ui = {
  body: $("body"),
  newPlayer: $("#newPlayer"),
  playerName: $("#playerName"),
  menu: $("#menu"),
  unError: $("#unError"),
  connection: $("#connection"),
  preloader: $("#preloader")
};

client.ready(function(serverLocal) {
  var joinServer, verifyUsername;
  server = serverLocal;
  ui.connection.hide();
  ui.menu.css('opacity', '1');
  server.getState().onReady(function(state) {
    if (!state.open) {
      return setTimeout(function() {
        setTimeout((function() {
          return ui.preloader.remove();
        }), 300);
        ui.preloader.css('opacity', '0');
        ui.connection.text("Sorry, but server is closed at now. You can try to connect later.");
        return ui.connection.show();
      }, 700);
    } else {
      return setTimeout(function() {
        setTimeout((function() {
          return ui.preloader.remove();
        }), 300);
        ui.preloader.css('opacity', '0');
        return ui.connection.css('opacity', '0');
      }, 700);
    }
  });
  verifyUsername = function(cb) {
    var un;
    un = ui.playerName.val();
    if (!(un === "admin" && global.token)) {
      return server.verifyUsername(un).onReady(function(result) {
        if (typeof result === 'string') {
          return ui.unError.text(result);
        } else {
          return cb();
        }
      });
    } else {
      return cb();
    }
  };
  ui.body.show();
  ui.newPlayer.on('click', function() {
    return joinServer();
  });
  ui.playerName.on('keypress', function(key) {
    if (key.key === "Enter") {
      return joinServer();
    }
  });
  $(document).on('keydown', null, 'alt+shift+t', function() {
    return global.token = prompt('Your token', '');
  });
  return joinServer = function() {
    return verifyUsername(function() {
      var name, registerPlayer;
      setTimeout((function() {
        return ui.menu.hide();
      }), 300);
      ui.menu.css('opacity', '0');
      name = ui.playerName.val();
      global.name = name;
      registerPlayer = function(token) {
        return server.newPlayer(name, token).onReady(function(player) {
          return server.getPlayers().onReady(function(playersTmp) {
            var _;
            global.ready = true;
            players = {};
            if (Object.keys(playersTmp).length) {
              for (_ in playersTmp) {
                player = playersTmp[_];
                console.log(player);
                if (player.name !== name) {
                  players[player.name] = newPlayer(player);
                }
                if (player.name === name) {
                  players[player.name] = newPlayer(player, global.token);
                }
                if (player.name === name) {
                  global.spawned = true;
                }
              }
            }
            return console.log('Got token! ' + global.token);
          });
        });
      };
      if (!global.token) {
        return server.getToken(name).onReady(function(token) {
          global.token = token;
          return registerPlayer(global.token);
        });
      } else {
        return registerPlayer(global.token);
      }
    });
  };
});
