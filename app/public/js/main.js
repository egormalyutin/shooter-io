// Generated by CoffeeScript 1.12.5
var Player, client, global, players, server, ui;

client = new Eureca.Client;

players = {};

global = {};

server = {};

Player = (function() {
  function Player(settings, token) {
    var name, prop, sf;
    for (name in settings) {
      prop = settings[name];
      this[name] = prop;
    }
    this.element = $("<div/>");
    this._elementName = $('<span/>');
    this._elementName.text(this.name + ": ");
    this._elementLabel = $("<span/>");
    this._elementLabel.text(this.count + " ");
    this.element.append(this._elementName);
    this.element.append(this._elementLabel);
    sf = this;
    if (token) {
      this._elementUp = $('<button>UP</button>');
      this._elementUp.on('click', function() {
        return server.playerChanged({
          name: sf.name,
          x: sf.x,
          y: sf.y,
          count: sf.count + 1,
          connectionID: sf.connectionID
        }, token);
      });
      this.element.append(this._elementUp);
    }
    $('#game').append(this.element);
  }

  Player.prototype.render = function() {
    return this._elementLabel.text(this.count + " ");
  };

  Player.prototype.remove = function() {
    return this.element.remove();
  };

  return Player;

})();

client.exports.playerUpdated = function(player) {
  if (!global.ready) {
    return;
  }
  if (!(players[player.name] && players.name !== global.name)) {
    return players[player.name] = new Player(player);
  } else {
    players[player.name].name = player.name;
    players[player.name].x = player.x;
    players[player.name].y = player.y;
    players[player.name].count = player.count;
    players[player.name].connectionID = player.connectionID;
    return players[player.name].render();
  }
};

client.exports.playerRemoved = function(name) {
  players[name].remove();
  return delete players[name];
};

ui = {
  body: $("body"),
  newPlayer: $("#newPlayer"),
  playerName: $("#playerName"),
  menu: $("#menu"),
  unError: $("#unError")
};

client.ready(function(serverLocal) {
  var joinServer, verifyUsername;
  server = serverLocal;
  verifyUsername = function(cb) {
    var un;
    un = ui.playerName.val();
    if (!(un === "admin" && global.token)) {
      return server.verifyUsername(un).onReady(function(result) {
        if (typeof result === 'string') {
          return ui.unError.text(result);
        } else {
          return cb();
        }
      });
    } else {
      return cb();
    }
  };
  ui.body.show();
  ui.newPlayer.on('click', function() {
    return joinServer();
  });
  ui.playerName.on('keypress', function(key) {
    if (key.key === "Enter") {
      return joinServer();
    }
  });
  $(document).on('keydown', null, 'alt+shift+t', function() {
    return global.token = prompt('Your token', '');
  });
  return joinServer = function() {
    return verifyUsername(function() {
      var name, registerPlayer;
      setTimeout((function() {
        return ui.menu.hide();
      }), 300);
      ui.menu.css('opacity', '0');
      name = ui.playerName.val();
      global.name = name;
      registerPlayer = function(token) {
        return server.newPlayer(name, token).onReady(function(player) {
          return server.getPlayers().onReady(function(playersTmp) {
            var _;
            global.ready = true;
            players = {};
            if (Object.keys(playersTmp).length) {
              for (_ in playersTmp) {
                player = playersTmp[_];
                console.log(player);
                if (player.name !== name) {
                  players[player.name] = new Player(player);
                }
                if (player.name === name) {
                  players[player.name] = new Player(player, global.token);
                }
                if (player.name === name) {
                  global.spawned = true;
                }
              }
            }
            return console.log('Got token! ' + global.token);
          });
        });
      };
      if (!global.token) {
        return server.getToken(name).onReady(function(token) {
          global.token = token;
          return registerPlayer(global.token);
        });
      } else {
        return registerPlayer(global.token);
      }
    });
  };
});
