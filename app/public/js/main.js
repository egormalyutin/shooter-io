// Generated by CoffeeScript 1.12.5
var Player, client, global, players, server, ui;

client = new Eureca.Client;

players = {};

global = {};

server = {};

Player = (function() {
  function Player(settings, token) {
    var name, prop, sf;
    for (name in settings) {
      prop = settings[name];
      this[name] = prop;
    }
    this.element = $("<div/>");
    this._elementLabel = $("<span/>");
    this._elementLabel.text(this.count);
    this.element.append(this._elementLabel);
    sf = this;
    if (token) {
      this._elementUp = $('<button>UP</button>');
      this._elementUp.on('click', function() {
        return server.playerChanged({
          name: sf.name,
          x: sf.x,
          y: sf.y,
          count: sf.count + 1
        }, token);
      });
      this.element.append(this._elementUp);
    }
    $('#game').append(this.element);
  }

  Player.prototype.render = function() {
    return this._elementLabel.text(this.count);
  };

  return Player;

})();

client.exports.playerUpdated = function(player) {
  if (!players[player.name]) {
    return players[player.name] = new Player(player);
  } else {
    players[player.name].name = player.name;
    players[player.name].x = player.x;
    players[player.name].y = player.y;
    players[player.name].count = player.count;
    return players[player.name].render();
  }
};

ui = {
  body: $("body"),
  newPlayer: $("#newPlayer"),
  playerName: $("#playerName"),
  menu: $("#menu")
};

client.ready(function(serverLocal) {
  var joinServer;
  server = serverLocal;
  ui.body.show();
  ui.newPlayer.on('click', function() {
    return joinServer();
  });
  ui.playerName.on('keypress', function(key) {
    if (key.key === "Enter") {
      return joinServer();
    }
  });
  return joinServer = function() {
    var name;
    setTimeout((function() {
      return ui.menu.hide();
    }), 300);
    ui.menu.css('opacity', '0');
    name = ui.playerName.val();
    return server.getToken(name).onReady(function(token) {
      global.name = name;
      global.token = token;
      return server.newPlayer(name, token).onReady(function(player) {
        return server.getPlayers().onReady(function(playersTmp) {
          var _, uis;
          uis = {};
          players = {};
          for (_ in playersTmp) {
            player = playersTmp[_];
            console.log(player);
            if (player.name !== name) {
              players[player.name] = new Player(player);
            }
            if (player.name === name) {
              players[player.name] = new Player(player, token);
            }
            if (player.name === name) {
              global.spawned = true;
            }
          }
          return console.log('Got token! ' + token);
        });
      });
    });
  };
});
