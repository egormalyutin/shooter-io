// Generated by CoffeeScript 1.12.5
var boxen, center, figlet, random, term, termkit, util;

termkit = require('terminal-kit');

term = termkit.terminal;

figlet = require('figlet');

center = require('center-align');

boxen = require('boxen');

util = require('util');

random = function(min, max) {
  if (!max) {
    max = min;
    min = 0;
  }
  return Math.floor(min + (Math.random() * (max - min)));
};

module.exports = function(eurecaServer) {
  var out;
  out = {
    info: function(phrase) {
      term.bold.magenta('⬢')(' ').bold(phrase)('\n');
      return out.cliRebase();
    },
    error: function(phrase) {
      term.bold.red('λ')(' ').bold(phrase)('\n');
      return out.cliRebase();
    },
    promo: function(phrase) {
      var text;
      term('\n');
      text = figlet.textSync(phrase, {
        font: 'Big',
        horizontalLayout: 'default',
        verticalLayout: 'default'
      });
      term.bold.brightCyan(text)('\n');
      return out.cliRebase();
    },
    welcome: function(phrase) {
      term.bold.brightCyan(phrase)('\n');
      return out.cliRebase();
    },
    message: function(phrase) {
      term('\n');
      term.bold(boxen(center(phrase + ""), {
        padding: 1
      }));
      return term('\n\n');
    },
    text: function(phrase, multiline) {
      var i, len, lines, ref, result, results1, string;
      lines = phrase.split(/\n/gi).length;
      if (lines === 1 && !multiline) {
        return term.bold("→ ").bold(phrase)("\n");
      } else {
        term.bold("→ ")("\n");
        result = [];
        ref = phrase.split(/\n/gi);
        results1 = [];
        for (i = 0, len = ref.length; i < len; i++) {
          string = ref[i];
          term.bold("  " + string);
          results1.push(term('\n'));
        }
        return results1;
      }
    },
    help: function() {
      return out.text(['help'.cyan + '                  - display this help', 'admin'.cyan + '                 - generate brand new admin token', 'remove [player name]'.cyan + '  - remove player from game', 'kick   [player name]'.cyan + '  - alias to ' + '"remove"'.cyan, 'players'.cyan + '               - view list of players', 'player [player name]'.cyan + '  - view information about player', 'close'.cyan + '                 - close server (kick all players and disallow joining for new players)', 'open'.cyan + '                  - open server back', 'allow-joining'.cyan + '         - allow new players to join game', 'disallow-joining'.cyan + '      - disallow new players to join game', 'aj'.cyan + '                    - alias to ' + '"allow-joining"'.cyan, 'daj'.cyan + '                   - alias to ' + '"disallow-joining"'.cyan, 'exit'.cyan + '                  - stop server and exit from server\'s CLI'].join('\n'));
    },
    cli: function() {
      var f;
      f = function() {
        return out.cliLine = term.inputField(function(err, input) {
          var _, com, name, player, players, results;
          if (err) {
            console.dir(err);
            return;
          }
          term('\n');
          com = 0;
          if (input.match(/^help/i)) {
            out.help();
            com++;
          }
          if (input.match(/^exit/i)) {
            out.exit();
            com++;
          }
          if (input.match(/^admin/i)) {
            out.getAdminToken();
            com++;
          }
          if (input.match(/^open/i)) {
            out.openServer();
            com++;
          }
          if (input.match(/^close/i)) {
            out.closeServer();
            com++;
          }
          if (input.match(/^allow-joining/i)) {
            out.allowJoining();
            com++;
          }
          if (input.match(/^aj/i)) {
            out.allowJoining();
            com++;
          }
          if (input.match(/^disallow-joining/i)) {
            out.disallowJoining();
            com++;
          }
          if (input.match(/^daj/i)) {
            out.disallowJoining();
            com++;
          }
          if (input.match(/^remove/i)) {
            if (input.match(/^remove .*$/i)) {
              out.removePlayer(input.match(/^remove (.*)$/i)[1]);
            } else {
              out.error('Invalid syntax!');
            }
            com++;
          }
          if (input.match(/^kick/i)) {
            if (input.match(/^kick .*$/i)) {
              out.removePlayer(input.match(/^kick (.*)$/i)[1]);
            } else {
              out.error('Invalid syntax!');
            }
            com++;
          }
          if (input.match(/^players/i)) {
            players = eurecaServer.exports.getPlayers();
            results = [];
            for (_ in players) {
              player = players[_];
              results.push(player.name);
            }
            out.text(results.join('\n'), true);
            com++;
          }
          if (input.match(/^player /i)) {
            if (input.match(/^player .*$/i)) {
              name = input.match(/^player (.*)$/i)[1];
              players = eurecaServer.exports.getPlayers();
              if (players[name]) {
                out.text(util.format(players[name]));
              } else {
                out.error('Player ' + name + ' not exists!');
              }
            } else {
              out.error('Invalid syntax!');
            }
            com++;
          }
          if (!com) {
            setImmediate(function() {
              return out.error('Unknown command!');
            });
          }
          return f();
        });
      };
      return f();
    },
    cliRebase: function() {
      if (out.cliLine) {
        return setImmediate(function() {
          return out.cliLine.rebase();
        });
      }
    },
    exit: function() {
      var phrases;
      phrases = ['Bye!', 'See you later!', 'See you soon!'];
      term('\n');
      term.bold.brightCyan(phrases[random(phrases.length)])('\n');
      term('\n');
      return process.exit();
    }
  };
  return out;
};
