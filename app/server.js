// Generated by CoffeeScript 1.12.5
var Eureca, app, boxen, center, eurecaServer, express, favicon, figlet, game, i, out, port, server, term, termkit, util;

termkit = require('terminal-kit');

term = termkit.terminal;

figlet = require('figlet');

center = require('center-align');

boxen = require('boxen');

util = require('util');

require('colors');

out = {
  info: function(phrase) {
    term.bold.magenta('⬢')(' ').bold(phrase)('\n');
    return out.cliRebase();
  },
  error: function(phrase) {
    term.bold.red('λ')(' ').bold(phrase)('\n');
    return out.cliRebase();
  },
  promo: function(phrase) {
    var text;
    term('\n');
    text = figlet.textSync(phrase, {
      font: 'Big',
      horizontalLayout: 'default',
      verticalLayout: 'default'
    });
    term.bold.brightCyan(text)('\n');
    return out.cliRebase();
  },
  welcome: function(phrase) {
    term.bold.underline.brightCyan(phrase)('\n');
    return out.cliRebase();
  },
  message: function(phrase) {
    term('\n');
    term.bold(boxen(center(phrase + ""), {
      padding: 1
    }));
    return term('\n\n');
  },
  text: function(phrase, multiline) {
    var j, len, lines, ref, result, results1, string;
    lines = phrase.split(/\n/gi).length;
    if (lines === 1 && !multiline) {
      return term.bold("→ ").bold(phrase)("\n");
    } else {
      term.bold("→ ")("\n");
      result = [];
      ref = phrase.split(/\n/gi);
      results1 = [];
      for (j = 0, len = ref.length; j < len; j++) {
        string = ref[j];
        term.bold("  " + string);
        results1.push(term('\n'));
      }
      return results1;
    }
  },
  help: function() {
    return out.text(['help'.cyan + '                  - display this help', 'admin'.cyan + '                 - generate brand new admin token', 'remove [player name]'.cyan + '  - remove player from game', 'kick [player name]'.cyan + '    - similar to ' + '"remove"'.cyan, 'exit'.cyan + '                  - stop server and exit from server\'s cli'].join('\n'));
  },
  cli: function() {
    var f;
    f = function() {
      return out.cliLine = term.inputField(function(err, input) {
        var _, com, name, player, players, results;
        if (err) {
          console.dir(err);
          return;
        }
        term('\n');
        com = 0;
        if (input.match(/^help/i)) {
          out.help();
          com++;
        }
        if (input.match(/^exit/i)) {
          process.exit();
          com++;
        }
        if (input.match(/^admin/i)) {
          out.getAdminToken();
          com++;
        }
        if (input.match(/^remove/i)) {
          if (input.match(/^remove .*$/i)) {
            out.removePlayer(input.match(/^remove (.*)$/i)[1]);
          } else {
            out.error('Invalid syntax!');
          }
          com++;
        }
        if (input.match(/^kick/i)) {
          if (input.match(/^kick .*$/i)) {
            out.removePlayer(input.match(/^kick (.*)$/i)[1]);
          } else {
            out.error('Invalid syntax!');
          }
          com++;
        }
        if (input.match(/^players/i)) {
          players = eurecaServer.exports.getPlayers();
          results = [];
          for (_ in players) {
            player = players[_];
            results.push(player.name);
          }
          out.text(results.join('\n'), true);
          com++;
        }
        if (input.match(/^player /i)) {
          if (input.match(/^player .*$/i)) {
            name = input.match(/^player (.*)$/i)[1];
            players = eurecaServer.exports.getPlayers();
            if (players[name]) {
              out.text(util.format(players[name]));
            } else {
              out.error('Player ' + name + ' not exists!');
            }
          } else {
            out.error('Invalid syntax!');
          }
          com++;
        }
        if (!com) {
          setImmediate(function() {
            return out.error('Unknown command!');
          });
        }
        return f();
      });
    };
    return f();
  },
  cliRebase: function() {
    if (out.cliLine) {
      return setImmediate(function() {
        return out.cliLine.rebase();
      });
    }
  }
};

express = require('express');

favicon = require('serve-favicon');

app = express(app);

app.engine('html', require('ejs').renderFile);

app.set('view engine', 'html');

app.use(express["static"](__dirname + "/public"));

app.set('views', __dirname + '/views');

server = require('http').createServer(app);

Eureca = require('eureca.io');

eurecaServer = new Eureca.Server({
  allow: ['playerUpdated', 'playerRemoved']
});

eurecaServer.attach(server);

i = 0;

app.get('/', function(req, res, next) {
  return res.render('index.html');
});

port = process.env.PORT || 5000;

server.listen(port);

game = require('./scripts/main.js')(eurecaServer, out);

out.promo('SHOOTER.IO');

out.welcome('Welcome in SHOOTER.IO server!');

out.message('Listening on ' + ('http://localhost:' + port).blue + '!');

out.getAdminToken();

out.welcome('Type "help" for view list of avaliable commands.');

out.cli();
